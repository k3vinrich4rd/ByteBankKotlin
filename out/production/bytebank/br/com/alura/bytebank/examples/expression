package br.com.alura.bytebank.test

import br.com.alura.bytebank.template.Address

fun testePilha() {

    println("Inicio main")
    val input: String = "1.9"

    val valorRecebido: Double? = try { //Pega o valor convertido
        input.toDouble() //Conversão
    } catch (e: NumberFormatException) {
        println("Problema na conversão")
        e.printStackTrace()
        null
    }

    val valorComTaxa: Double? = if (valorRecebido != null) {
        valorRecebido + 0.1
    } else {
        null
    }


    if (valorComTaxa != null) {
        println("Valor recebido: $valorComTaxa")
    } else {
        println("Valor inválido")
    }

    funcao1()
    println("fim main")


}

fun funcao1() {
    println("inicio função1")
    try {
        funcao2()
    } catch (e: ClassCastException) {
        println(e.message) //Retorna o motivo do lançamento da exception com a justificativa
        println(e.stackTrace) //É um objeto
        println(e.cause) // Causa
        e.printStackTrace()
        println("ClassCastException foi pegada")
    }
    println("fim função1")
}


fun funcao2() {
    println("inicio função2")
    for (i in 1..5) {
        println(i)
        val address = Any()
        address as Address

    }
    println("fim função2")
}